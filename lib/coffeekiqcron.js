// Generated by CoffeeScript 1.4.0
(function() {
  var CoffeeKiq, CoffeeKiqCron, crypto,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CoffeeKiq = require('coffeekiq').CoffeeKiq;

  crypto = require('crypto');

  CoffeeKiqCron = (function(_super) {

    __extends(CoffeeKiqCron, _super);

    function CoffeeKiqCron(redis_port, redis_host, redis_password) {
      if (redis_password == null) {
        redis_password = null;
      }
      CoffeeKiqCron.__super__.constructor.call(this, redis_port, redis_host, redis_password);
    }

    CoffeeKiqCron.prototype.find = function(name, cb) {
      var result;
      if (!this.connected) {
        this.connect();
      }
      return result = this.redis_client.hgetall("cron_job:" + name, cb);
    };

    CoffeeKiqCron.prototype.enqueue = function(name) {
      var self;
      self = this;
      this.find(name, function(err, result) {
        var msg, queue;
        if (err == null) {
          msg = JSON.parse(result.message);
          if (result.queue != null) {
            queue = result.queue;
          } else {
            queue = 'default';
          }
          return self.perform(queue, result.klass, msg.args);
        } else {
          return self.emit('enqueue:error');
        }
      });
      return "trying to enqueue " + name;
    };

    CoffeeKiqCron.prototype.perform = function(queue, klass, args, options) {
      var namespace, retry, self;
      if (options == null) {
        options = {};
      }
      self = this;
      if (!(options.namespace != null)) {
        namespace = "";
      } else {
        namespace = options.namespace;
      }
      if (!(options.retry != null)) {
        retry = false;
      } else {
        retry = true;
      }
      return crypto.randomBytes(12, function(ex, buf) {
        var payload;
        if (ex != null) {
          throw new Error("could not create random bytes for jid");
        }
        payload = JSON.stringify({
          queue: queue,
          "class": klass,
          args: args,
          jid: buf.toString('hex')
        });
        self.redis_client.sadd(_.compact([namespace, "queues"]).join(":"), queue);
        self.redis_client.lpush(_.compact([namespace, "queue", queue]).join(":"), payload);
        self.emit('perform:done');
        return true;
      });
    };

    return CoffeeKiqCron;

  })(CoffeeKiq);

  exports.CoffeeKiqCron = CoffeeKiqCron;

}).call(this);
